openapi: 3.0.3
info:
  title: Adil GFX API
  description: |
    Complete API specification for the Adil GFX Design Services Platform.

    ## Architecture
    - **Backend:** PHP 7.4+ with MySQL
    - **Hosting:** Hostinger
    - **Authentication:** JWT Bearer tokens
    - **Rate Limiting:** 100 requests/hour per IP

    ## Base URLs
    - **Development:** `http://localhost/backend`
    - **Production:** `https://adilgfx.com/backend`

    ## Authentication
    Most endpoints require a JWT token in the Authorization header:
    ```
    Authorization: Bearer <your_jwt_token>
    ```

    Obtain a token by calling `/api/auth/login` with valid credentials.

    ## Rate Limiting
    All endpoints are subject to rate limiting:
    - **Limit:** 100 requests per hour per IP address
    - **Response:** 429 Too Many Requests when exceeded
    - **Header:** `Retry-After: 3600` (seconds until reset)

  version: 1.0.0
  contact:
    name: Adil GFX Support
    email: hello@adilgfx.com
  license:
    name: Proprietary

servers:
  - url: http://localhost/backend
    description: Local development server
  - url: https://adilgfx.com/backend
    description: Production server (Hostinger)

tags:
  - name: Authentication
    description: User registration, login, and token management
  - name: Blogs
    description: Blog post management and retrieval
  - name: Portfolio
    description: Portfolio project showcase
  - name: Services
    description: Service offerings and pricing
  - name: Testimonials
    description: Client testimonials and reviews
  - name: Pages
    description: Dynamic page content management
  - name: Carousel
    description: Homepage and section slider management
  - name: Settings
    description: Global site settings and configuration
  - name: Media
    description: File upload and media library management
  - name: Contact
    description: Contact form submissions
  - name: Newsletter
    description: Newsletter subscription management
  - name: User
    description: User profile and dashboard data
  - name: Admin
    description: Admin-only endpoints for statistics and management

paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user account
      description: Create a new user account with email and password
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: SecurePass123
                name:
                  type: string
                  minLength: 2
                  example: John Doe
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account created successfully
                  user_id:
                    type: integer
                    example: 42
        '400':
          description: Bad request (validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login to user account
      description: Authenticate user and receive JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: SecurePass123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: '#/components/schemas/UserBasic'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/verify:
    get:
      tags:
        - Authentication
      summary: Verify JWT token
      description: Validate JWT token and get user information
      operationId: verifyToken
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/UserBasic'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/blogs:
    get:
      tags:
        - Blogs
      summary: Get paginated blog posts
      description: Retrieve list of published blogs with pagination and filtering
      operationId: getBlogs
      parameters:
        - name: page
          in: query
          description: Page number (1-indexed)
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Items per page (max 50)
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
            example: YouTube Growth
        - name: search
          in: query
          description: Search in title, excerpt, content, and tags
          schema:
            type: string
            example: thumbnail
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BlogSummary'
                  page:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 5
                  totalItems:
                    type: integer
                    example: 47
                  itemsPerPage:
                    type: integer
                    example: 10
    post:
      tags:
        - Blogs
      summary: Create new blog post
      description: Create a new blog post (admin only)
      operationId: createBlog
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogInput'
      responses:
        '201':
          description: Blog created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: integer
        '401':
          description: Unauthorized (not admin)
        '400':
          description: Validation error

  /api/blogs/{identifier}:
    get:
      tags:
        - Blogs
      summary: Get single blog post
      description: Retrieve a single blog post by ID or slug
      operationId: getBlogById
      parameters:
        - name: identifier
          in: path
          required: true
          description: Blog ID or slug
          schema:
            type: string
            example: youtube-thumbnail-secrets-boost-ctr
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogFull'
        '404':
          description: Blog not found
    put:
      tags:
        - Blogs
      summary: Update blog post
      description: Update an existing blog post (admin only)
      operationId: updateBlog
      security:
        - bearerAuth: []
      parameters:
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogInput'
      responses:
        '200':
          description: Blog updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Blog not found
    delete:
      tags:
        - Blogs
      summary: Delete blog post
      description: Delete a blog post (admin only)
      operationId: deleteBlog
      security:
        - bearerAuth: []
      parameters:
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Blog deleted successfully
        '401':
          description: Unauthorized

  /api/portfolio:
    get:
      tags:
        - Portfolio
      summary: Get paginated portfolio items
      description: Retrieve portfolio projects with pagination and filtering
      operationId: getPortfolio
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            maximum: 50
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
            example: Logo Design
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PortfolioItem'
                  page:
                    type: integer
                  totalPages:
                    type: integer
                  totalItems:
                    type: integer
    post:
      tags:
        - Portfolio
      summary: Create portfolio item
      description: Add new portfolio project (admin only)
      operationId: createPortfolio
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioInput'
      responses:
        '201':
          description: Portfolio item created
        '401':
          description: Unauthorized

  /api/portfolio/{identifier}:
    get:
      tags:
        - Portfolio
      summary: Get single portfolio item
      operationId: getPortfolioById
      parameters:
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioItem'
        '404':
          description: Portfolio item not found

  /api/services:
    get:
      tags:
        - Services
      summary: Get all services
      description: Retrieve all available services with pricing
      operationId: getServices
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
    post:
      tags:
        - Services
      summary: Create new service
      description: Add new service offering (admin only)
      operationId: createService
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceInput'
      responses:
        '201':
          description: Service created
        '401':
          description: Unauthorized

  /api/testimonials:
    get:
      tags:
        - Testimonials
      summary: Get all testimonials
      description: Retrieve all published testimonials
      operationId: getTestimonials
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Testimonial'
    post:
      tags:
        - Testimonials
      summary: Create testimonial
      description: Add new testimonial (admin only)
      operationId: createTestimonial
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestimonialInput'
      responses:
        '201':
          description: Testimonial created
        '401':
          description: Unauthorized

  /api/settings:
    get:
      tags:
        - Settings
      summary: Get all settings
      description: Retrieve all global site settings
      operationId: getSettings
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
    post:
      tags:
        - Settings
      summary: Create new setting
      description: Add new configuration setting (admin only)
      operationId: createSetting
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingInput'
      responses:
        '201':
          description: Setting created

  /api/settings/{key}:
    get:
      tags:
        - Settings
      summary: Get single setting
      operationId: getSetting
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
            example: primary_color
      responses:
        '200':
          description: Successful response
    put:
      tags:
        - Settings
      summary: Update setting
      description: Update configuration setting (admin only)
      operationId: updateSetting
      security:
        - bearerAuth: []
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                type:
                  type: string
                  enum: [text, json, boolean, number, file]
      responses:
        '200':
          description: Setting updated

  /api/pages:
    get:
      tags:
        - Pages
      summary: Get all pages
      description: Retrieve navigation pages (public) or all pages (admin)
      operationId: getPages
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Page'
    post:
      tags:
        - Pages
      summary: Create new page
      description: Create dynamic page with sections (admin only)
      operationId: createPage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageInput'
      responses:
        '201':
          description: Page created

  /api/pages/{slug}:
    get:
      tags:
        - Pages
      summary: Get page by slug
      operationId: getPageBySlug
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
            example: about-us
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '404':
          description: Page not found

  /api/carousel:
    get:
      tags:
        - Carousel
      summary: Get carousel slides
      description: Retrieve slides for a specific carousel
      operationId: getCarouselSlides
      parameters:
        - name: name
          in: query
          required: true
          description: Carousel name (e.g., 'hero', 'services', 'testimonials')
          schema:
            type: string
            example: hero
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarouselSlide'
    post:
      tags:
        - Carousel
      summary: Create carousel slide
      description: Add new slide to carousel (admin only)
      operationId: createCarouselSlide
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarouselSlideInput'
      responses:
        '201':
          description: Slide created

  /api/uploads:
    post:
      tags:
        - Media
      summary: Upload media file
      description: Upload image, video, or document to media library
      operationId: uploadMedia
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload (max 10MB for images, 50MB for videos)
                altText:
                  type: string
                  description: Alt text for accessibility
                caption:
                  type: string
                  description: Image caption
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  file:
                    type: object
                    properties:
                      id:
                        type: integer
                      filename:
                        type: string
                      url:
                        type: string
                      originalName:
                        type: string
        '400':
          description: Invalid file or size limit exceeded
        '401':
          description: Unauthorized
    get:
      tags:
        - Media
      summary: Get media library
      description: Retrieve uploaded media files
      operationId: getMediaLibrary
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 50
        - name: type
          in: query
          description: Filter by MIME type
          schema:
            type: string
            example: image/jpeg
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MediaFile'
                  page:
                    type: integer
                  totalPages:
                    type: integer

  /api/contact:
    post:
      tags:
        - Contact
      summary: Submit contact form
      description: Submit contact form inquiry
      operationId: submitContact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - service
                - message
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                service:
                  type: string
                  example: Logo Design
                budget:
                  type: string
                  example: $500-$1000
                message:
                  type: string
                  example: I need a logo for my startup
                timeline:
                  type: string
                  example: 2 weeks
                phone:
                  type: string
                  example: +1234567890
      responses:
        '200':
          description: Form submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Validation error

  /api/newsletter/subscribe:
    post:
      tags:
        - Newsletter
      summary: Subscribe to newsletter
      description: Add email to newsletter subscription list
      operationId: subscribeNewsletter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: subscriber@example.com
      responses:
        '200':
          description: Subscription successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid email or already subscribed

  /api/user/profile:
    get:
      tags:
        - User
      summary: Get user dashboard data
      description: Retrieve complete user profile including tokens, streaks, referrals
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
    put:
      tags:
        - User
      summary: Update user profile
      description: Update user profile information
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                avatar:
                  type: string
                preferences:
                  type: object
      responses:
        '200':
          description: Profile updated
        '401':
          description: Unauthorized

  /api/admin/stats:
    get:
      tags:
        - Admin
      summary: Get dashboard statistics
      description: Retrieve admin dashboard metrics (admin only)
      operationId: getAdminStats
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminStats'
        '403':
          description: Admin access required

  /api/admin/activity:
    get:
      tags:
        - Admin
      summary: Get recent activity log
      description: Retrieve recent system activity (admin only)
      operationId: getAdminActivity
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityLog'
        '403':
          description: Admin access required

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /api/auth/login

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: Invalid credentials

    UserBasic:
      type: object
      properties:
        id:
          type: integer
          example: 42
        email:
          type: string
          format: email
          example: user@example.com
        name:
          type: string
          example: John Doe
        role:
          type: string
          enum: [user, admin]
          example: user
        avatar:
          type: string
          example: /uploads/avatar.jpg
        verified:
          type: boolean
          example: true

    BlogSummary:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        slug:
          type: string
        excerpt:
          type: string
        category:
          type: string
        author:
          type: object
          properties:
            name:
              type: string
            avatar:
              type: string
            bio:
              type: string
        date:
          type: string
          format: date-time
        readTime:
          type: string
        featuredImage:
          type: string
        tags:
          type: array
          items:
            type: string
        featured:
          type: boolean
        views:
          type: integer
        likes:
          type: integer

    BlogFull:
      allOf:
        - $ref: '#/components/schemas/BlogSummary'
        - type: object
          properties:
            content:
              type: string
              description: Full blog content in markdown

    BlogInput:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
        excerpt:
          type: string
        content:
          type: string
        category:
          type: string
        featured_image:
          type: string
        tags:
          type: array
          items:
            type: string
        featured:
          type: boolean

    PortfolioItem:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        slug:
          type: string
        category:
          type: string
        description:
          type: string
        longDescription:
          type: string
        client:
          type: string
        completionDate:
          type: string
          format: date
        featuredImage:
          type: string
        images:
          type: array
          items:
            type: string
        beforeImage:
          type: string
        afterImage:
          type: string
        tags:
          type: array
          items:
            type: string
        results:
          type: object
          properties:
            metric1:
              type: string
            metric2:
              type: string
            metric3:
              type: string
        featured:
          type: boolean
        views:
          type: integer

    PortfolioInput:
      type: object
      required:
        - title
        - category
        - description
      properties:
        title:
          type: string
        category:
          type: string
        description:
          type: string
        longDescription:
          type: string
        client:
          type: string
        completionDate:
          type: string
        featuredImage:
          type: string
        images:
          type: array
          items:
            type: string
        beforeImage:
          type: string
        afterImage:
          type: string
        tags:
          type: array
          items:
            type: string
        results:
          type: object
        featured:
          type: boolean

    Service:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
        icon:
          type: string
        tagline:
          type: string
        description:
          type: string
        features:
          type: array
          items:
            type: string
        pricingTiers:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              price:
                type: number
              duration:
                type: string
              features:
                type: array
                items:
                  type: string
              popular:
                type: boolean
        deliveryTime:
          type: string
        popular:
          type: boolean
        testimonialIds:
          type: array
          items:
            type: integer

    ServiceInput:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        slug:
          type: string
        icon:
          type: string
        tagline:
          type: string
        description:
          type: string
        features:
          type: array
          items:
            type: string
        pricingTiers:
          type: array
          items:
            type: object
        deliveryTime:
          type: string
        popular:
          type: boolean

    Testimonial:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        role:
          type: string
        company:
          type: string
        content:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        avatar:
          type: string
        date:
          type: string
          format: date
        projectType:
          type: string
        verified:
          type: boolean

    TestimonialInput:
      type: object
      required:
        - name
        - content
        - rating
      properties:
        name:
          type: string
        role:
          type: string
        company:
          type: string
        content:
          type: string
        rating:
          type: integer
        avatar:
          type: string
        projectType:
          type: string
        verified:
          type: boolean

    Settings:
      type: object
      properties:
        branding:
          type: object
        contact:
          type: object
        social:
          type: object
        features:
          type: object
        analytics:
          type: object

    SettingInput:
      type: object
      required:
        - key
        - value
        - type
      properties:
        key:
          type: string
        value:
          type: string
        type:
          type: string
          enum: [text, json, boolean, number, file]
        category:
          type: string
        description:
          type: string

    Page:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        slug:
          type: string
        metaTitle:
          type: string
        metaDescription:
          type: string
        sections:
          type: array
          items:
            type: object
        status:
          type: string
          enum: [draft, published, archived]
        sortOrder:
          type: integer
        showInNav:
          type: boolean

    PageInput:
      type: object
      required:
        - title
        - sections
      properties:
        title:
          type: string
        metaTitle:
          type: string
        metaDescription:
          type: string
        sections:
          type: array
          items:
            type: object
        status:
          type: string
        showInNav:
          type: boolean

    CarouselSlide:
      type: object
      properties:
        id:
          type: integer
        carouselName:
          type: string
        title:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        ctaText:
          type: string
        ctaUrl:
          type: string
        sortOrder:
          type: integer

    CarouselSlideInput:
      type: object
      required:
        - carouselName
        - title
      properties:
        carouselName:
          type: string
        title:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        ctaText:
          type: string
        ctaUrl:
          type: string

    MediaFile:
      type: object
      properties:
        id:
          type: integer
        filename:
          type: string
        filePath:
          type: string
        fileSize:
          type: integer
        mimeType:
          type: string
        altText:
          type: string
        caption:
          type: string
        uploadedAt:
          type: string
          format: date-time
        uploadedBy:
          type: integer

    UserProfile:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserBasic'
        tokens:
          type: object
          properties:
            balance:
              type: integer
            totalEarned:
              type: integer
            totalSpent:
              type: integer
            history:
              type: array
              items:
                type: object
        streak:
          type: object
          properties:
            current:
              type: integer
            longest:
              type: integer
            lastCheckIn:
              type: string
            nextMilestone:
              type: integer
            rewards:
              type: object
        referrals:
          type: object
          properties:
            code:
              type: string
            totalReferred:
              type: integer
            successfulConversions:
              type: integer
            earningsFromReferrals:
              type: integer
            referralLink:
              type: string
        orders:
          type: array
          items:
            type: object
        achievements:
          type: array
          items:
            type: object
        preferences:
          type: object

    AdminStats:
      type: object
      properties:
        totalUsers:
          type: integer
        activeUsers:
          type: integer
        totalBlogs:
          type: integer
        totalOrders:
          type: integer
        revenue:
          type: number
        growthMetrics:
          type: object

    ActivityLog:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        action:
          type: string
        entity:
          type: string
        entityId:
          type: integer
        timestamp:
          type: string
          format: date-time
        ipAddress:
          type: string
        userAgent:
          type: string
